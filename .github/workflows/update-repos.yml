name: Update Repos JSON

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  update:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout do reposit칩rio
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Verificar se token est치 definido
        run: |
          if [ -z "${{ secrets.PERSONAL_TOKEN }}" ]; then
            echo "::error::O token PERSONAL_TOKEN n칚o est치 definido!"
            exit 1
          else
            echo "Token PERSONAL_TOKEN est치 configurado"
          fi

      - name: Buscar reposit칩rios via API GitHub
        run: |
          echo "Obtendo lista de reposit칩rios..."
          curl -s -H "Authorization: token ${{ secrets.PERSONAL_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               "https://api.github.com/users/WesleyS08/repos?per_page=100&sort=updated" \
               > repos.json
          
          # Verificar se a API retornou dados
          if [ ! -s repos.json ]; then
            echo "::error::Falha ao obter reposit칩rios da API"
            exit 1
          fi

          # Listar nomes dos reposit칩rios para log
          echo "Reposit칩rios encontrados:"
          jq -r '.[].name' repos.json

      - name: Calcular porcentagem de linguagens
        run: |
          set -euo pipefail
          IFS=$'\n\t'

          echo "Processando linguagens dos reposit칩rios..."
          repos=$(jq -r '.[].name' repos.json)
          declare -A lang_bytes=()
          total_repos=0
          processed_repos=0

          for repo in $repos; do
            # Ignorar reposit칩rios inv치lidos
            if [[ -z "$repo" || "$repo" == "WesleyS08" ]]; then
              echo "Pulando reposit칩rio inv치lido: $repo"
              continue
            fi

            ((total_repos++))
            echo "Processando: $repo ($total_repos/${#repos[@]})"
            
            # Adicionar delay para evitar rate limiting
            sleep 1

            langs=$(curl -s -H "Authorization: token ${{ secrets.PERSONAL_TOKEN }}" \
                     -H "Accept: application/vnd.github.v3+json" \
                     "https://api.github.com/repos/WesleyS08/$repo/languages" | \
                     jq -r 'to_entries|map("\(.key) \(.value)")|.[]')

            if [[ -z "$langs" ]]; then
              echo "  Nenhuma linguagem detectada"
              continue
            fi

            ((processed_repos++))
            while read -r lang bytes; do
              if [[ -n "$lang" ]]; then
                lang_bytes[$lang]=$(( ${lang_bytes[$lang]:-0} + bytes ))
              fi
            done <<< "$langs"
          done

          echo "--------------------------------------------------"
          echo "Resumo:"
          echo "Total de reposit칩rios: $total_repos"
          echo "Reposit칩rios com linguagens detectadas: $processed_repos"

          if [ ${#lang_bytes[@]} -eq 0 ]; then
            echo "Nenhuma linguagem encontrada em todos os reposit칩rios"
            echo "{}" > languages.json
            exit 0
          fi

          # Calcular totais
          total_bytes=0
          for bytes in "${lang_bytes[@]}"; do
            total_bytes=$(( total_bytes + bytes ))
          done

          if [ $total_bytes -eq 0 ]; then
            echo "Total de bytes 칠 zero, n칚o 칠 poss칤vel calcular porcentagens"
            echo "{}" > languages.json
            exit 0
          fi

          # Gerar sa칤da formatada
          echo "Distribui칞칚o de linguagens:"
          echo "{" > languages.json
          first=true
          for lang in $(for k in "${!lang_bytes[@]}"; do echo "$k"; done | sort); do
            bytes=${lang_bytes[$lang]}
            percent=$(awk "BEGIN {printf \"%.2f\", $bytes*100/$total_bytes}")
            
            # Log formatado
            printf "%-15s %10d bytes %6.2f%%\n" "$lang" "$bytes" "$percent"
            
            # JSON output
            if [ "$first" = true ]; then
              first=false
            else
              echo "," >> languages.json
            fi
            echo -n "\"$lang\": $percent" >> languages.json
          done
          echo -e "\n}" >> languages.json

      - name: Configurar Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git remote set-url origin "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${GITHUB_REPOSITORY}.git"

      - name: Commit e push das altera칞칫es
        run: |
          # Verificar se houve mudan칞as
          if git diff --quiet --exit-code; then
            echo "Nenhuma mudan칞a detectada para commitar"
          else
            echo "Preparando commit..."
            git add repos.json languages.json
            git commit -m "游늵 Atualiza칞칚o autom치tica: dados de reposit칩rios e linguagens"
            git pull --rebase
            git push origin main
            echo "Altera칞칫es enviadas com sucesso"
          fi

      - name: Exibir resultados
        run: |
          echo "=== Arquivo repos.json ==="
          head -n 10 repos.json
          echo "..."
          echo -e "\n=== Arquivo languages.json ==="
          cat languages.json
